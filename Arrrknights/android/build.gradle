plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

apply plugin: 'com.android.application'

android {
    namespace "com.shatteredpixel.yesterdaypixel"
    compileSdkVersion appAndroidCompileSDK
    compileOptions.sourceCompatibility = compileOptions.targetCompatibility = appJavaCompatibility

    sourceSets.main.assets.srcDirs = [new File(project(':core').projectDir, "/src/main/assets")]

    signingConfigs {

    }

    defaultConfig {
        manifestPlaceholders = [appName:appName]
        applicationId appPackageName

        versionCode appVersionCode
        versionName appVersionName

        //noinspection MinSdkTooLow
        minSdkVersion appAndroidMinSDK
        targetSdkVersion appAndroidTargetSDK
        multiDexEnabled true

        resConfigs "en_US", "cs", "tr", "ca", "ko", "pl", "it", "ja",
                "eo", "ru", "zh_CN", "de", "fr", "es", "pt", "fi", "hu", "in"
    }

    buildTypes {
        debug {
            //applicationIdSuffix ".indev"
            versionNameSuffix '-INDEV'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            dependencies {
                debugImplementation project(':services:updates:debugUpdates')
                debugImplementation project(':services:news:debugNews')
            }
        }
        release {
            //These lines enable R8, which is a code shrinker/optimizer/obfuscator.
            //This makes release APKs smaller and more efficiclasses.dexent, but also makes debugging trickier
            //as the information produced in stack traces must be de-obfuscated.
            //See here: https://developer.android.com/studio/build/shrink-code#decode-stack-trace
           // shrinkResources true
           // minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            dependencies {
                releaseImplementation project(':services:updates:githubUpdates')
                releaseImplementation project(':services:news:shatteredNews')
            }
            //applicationIdSuffix '.Release'
            versionNameSuffix '-Release'

        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = parent.project.getName() + "-v${variant.versionName}.apk"}}
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

configurations { natives }

dependencies {
    implementation 'cat.ereza:customactivityoncrash:2.3.0'
    implementation project(':core')

    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:1.11.0:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:1.11.0:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:1.11.0:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:1.11.0:natives-x86_64"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.11.0:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.11.0:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.11.0:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:1.11.0:natives-x86_64"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-android:$gdxControllersVersion"
    implementation 'androidx.core:core:1.8.0'

    implementation(platform("com.google.firebase:firebase-bom:32.3.1"))
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-auth")
    implementation("com.google.firebase:firebase-firestore")
    implementation('com.android.support:multidex:2.0.1')
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}